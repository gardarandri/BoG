
%{
enum bog_tokens{
BOG_INT
BOG_FLOAT
BOG_BOOL
BOG_IF
BOG_ELSE
BOG_WHILE
BOG_CONST
BOG_DERV
BOG_O_CURLY
BOG_C_CURLY
BOG_O_PARAN
BOG_C_PARAN
BOG_O_BRACKET
BOG_C_BRACKET
BOG_SEMICOLON
BIG_COLON
BOG_QUOTE
BOG_HASH
BOG_ASSIGN
BOG_PLUS
BOG_MINUS
BOG_MULT
BOG_DIV
BIG_MOD
BOG_OR
BOG_AND
BOG_EQ
BOG_NEQ
BOG_NOT
BOG_LE
BOG_GE
BOG_LEQ
BOG_GEQ
BOG_PLUS_ASSIGN
BOG_MINUS_ASSIGN
BOG_MULT_ASSIGN
BOG_DIV_ASSIGN
BOG_MOD_ASSIGN
BOG_INCREMENTOR
BOG_DECREMENTER

BOG_NAME
};

#define BOG_DEBUG
#ifdef BOG_DEBUG
	#define BOG_KEYWORD(E) printf(#E); printf(" %s\n",yytext);
	#define BOG_SPECIAL_CHAR(E) printf(#E); printf(" %s\n",yytext);
	#define BOG_OPERATOR(E) printf(#E); printf(" %s\n",yytext);
	#define BOG_LITERALS(E) printf(#E); printf(" %s\n",yytext);
	#define BOG_NAME(E) printf(#E); printf(" %s\n",yytext);
#else
	#define BOG_KEYWORD(E) return E;
	#define BOG_SPECIAL_CHAR(E) return E;
	#define BOG_OPERATOR(E) return E;
	#define BOG_LITERALS(E) return E;
	#define BOG_NAME(E) return E;
#endif
%}

WS			[ \t\n\r\f]
INTEGER		[0-9]+
FLOAT		[0-9]+\.[0-9]+([Ee][+-]?[0-9]+)?
BOOLEAN		(true)|(false)
NAME		[a-zA-Z][a-zA-Z0-9_]*

%%

{WS}		/* Do nothing */

int			BOG_KEYWORD(BOG_INT)
float		BOG_KEYWORD(BOG_FLOAT)
bool		BOG_KEYWORD(BOG_BOOL)
if			BOG_KEYWORD(BOG_IF)
else		BOG_KEYWORD(BOG_ELSE)
while		BOG_KEYWORD(BOG_WHILE)
const		BOG_KEYWORD(BOG_CONST)
DERV		BOG_KEYWORD(BOG_DERV)


"{"			BOG_SPECIAL_CHAR(BOG_O_CURLY)
"}"			BOG_SPECIAL_CHAR(BOG_C_CURLY)
"("			BOG_SPECIAL_CHAR(BOG_O_PARAN)
")"			BOG_SPECIAL_CHAR(BOG_C_PARAN)
"["			BOG_SPECIAL_CHAR(BOG_O_BRACKET)
"]"			BOG_SPECIAL_CHAR(BOG_C_BRACKET)
";"			BOG_SPECIAL_CHAR(BOG_SEMICOLON)
":"			BOG_SPECIAL_CHAR(BIG_COLON)
"\""		BOG_SPECIAL_CHAR(BOG_QUOTE)
"#"			BOG_SPECIAL_CHAR(BOG_HASH)
"="			BOG_SPECIAL_CHAR(BOG_ASSIGN)


"+"			BOG_OPERATOR(BOG_PLUS)
"-"			BOG_OPERATOR(BOG_MINUS)
"*"			BOG_OPERATOR(BOG_MULT)
"/"			BOG_OPERATOR(BOG_DIV)
"%"			BOG_OPERATOR(BIG_MOD)
"||"		BOG_OPERATOR(BOG_OR)
"&&"		BOG_OPERATOR(BOG_AND)
"=="		BOG_OPERATOR(BOG_EQ)
"!="		BOG_OPERATOR(BOG_NEQ)
"!"			BOG_OPERATOR(BOG_NOT)
"<"			BOG_OPERATOR(BOG_LE)
">"			BOG_OPERATOR(BOG_GE)
"<="		BOG_OPERATOR(BOG_LEQ)
">="		BOG_OPERATOR(BOG_GEQ)
"+="		BOG_OPERATOR(BOG_PLUS_ASSIGN)
"-="		BOG_OPERATOR(BOG_MINUS_ASSIGN)
"*="		BOG_OPERATOR(BOG_MULT_ASSIGN)
"/="		BOG_OPERATOR(BOG_DIV_ASSIGN)
"%="		BOG_OPERATOR(BOG_MOD_ASSIGN)
"++"		BOG_OPERATOR(BOG_INCREMENTOR)
"--"		BOG_OPERATOR(BOG_DECREMENTER)

{NAME}		BIG_NAME(BOG_NAME)

{INTEGER}	BOG_LITERALS(BOG_INT)
{FLOAT}		BOG_LITERALS(BOG_FLOAT)
{BOOLEAN}	BOG_LITERALS(BOG_BOOLEAN)







