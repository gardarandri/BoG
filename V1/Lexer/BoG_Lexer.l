
%{

#define BOG_INT 1000
#define BOG_FLOAT 1001
#define BOG_BOOL 1002
#define BOG_IF 1003
#define BOG_ELSE 1004
#define BOG_WHILE 1005
#define BOG_CONST 1006
#define BOG_RETURN 1007
#define BOG_DERV 1008
#define BOG_O_CURLY 1009
#define BOG_C_CURLY 1010
#define BOG_O_PARAN 1011
#define BOG_C_PARAN 1012
#define BOG_O_BRACKET 1013
#define BOG_C_BRACKET 1014
#define BOG_SEMICOLON 1015
#define BIG_COLON 1016
#define BOG_QUOTE 1017
#define BOG_HASH 1018
#define BOG_ASSIGN 1019
#define BOG_PERIOD 1020
#define BOG_COMMA 1021
#define BOG_BACKSLASH 1022
#define BOG_PLUS 1023
#define BOG_MINUS 1024
#define BOG_MULT 1025
#define BOG_DIV 1026
#define BIG_MOD 1027
#define BOG_OR 1028
#define BOG_AND 1029
#define BOG_EQ 1030
#define BOG_NEQ 1031
#define BOG_NOT 1032
#define BOG_LE 1033
#define BOG_GE 1034
#define BOG_LEQ 1035
#define BOG_GEQ 1036
#define BOG_PLUS_ASSIGN 1037
#define BOG_MINUS_ASSIGN 1038
#define BOG_MULT_ASSIGN 1039
#define BOG_DIV_ASSIGN 1040
#define BOG_MOD_ASSIGN 1041
#define BOG_INCREMENTOR 1042
#define BOG_DECREMENTER 1043
#define BOG_NAME_ENUM 1044
#define BOG_ERROR (-1)

#ifdef BOG_DEBUG
	#define BOG_KEYWORD(E) printf(#E); printf(" '%s'\n",yytext);
	#define BOG_SPECIAL_CHAR(E) printf(#E); printf(" '%s'\n",yytext);
	#define BOG_OPERATOR(E) printf(#E); printf(" '%s'\n",yytext);
	#define BOG_LITERALS(E) printf(#E); printf(" '%s'\n",yytext);
	#define BOG_NAME(E) printf(#E); printf(" '%s'\n",yytext);
	#define BOG_REPORT printf("Found unrecognized token: '%s'\n",yytext); exit(BOG_ERROR);
#else
	#define BOG_KEYWORD(E) return E;
	#define BOG_SPECIAL_CHAR(E) return E;
	#define BOG_OPERATOR(E) return E;
	#define BOG_LITERALS(E) return E;
	#define BOG_NAME(E) return E;
	#define BOG_REPORT return BOG_ERROR;
#endif
%}

WS				[ \t\n\r\f]
INTEGER			[0-9]+
FLOAT			[0-9]+\.[0-9]+([Ee][+-]?[0-9]+)?
BOOLEAN			(true)|(false)
NAME			[a-zA-Z_][a-zA-Z0-9_]*
COMMENT			\/\/.*\n
BLOCKCOMMENT	\/\*(.|\n)*\*\/

%%

{COMMENT}		/* Do nothing */
{BLOCKCOMMENT}	/* Do nothing */
{WS}			/* Do nothing */

int			BOG_KEYWORD(BOG_INT)
float		BOG_KEYWORD(BOG_FLOAT)
bool		BOG_KEYWORD(BOG_BOOL)
if			BOG_KEYWORD(BOG_IF)
else		BOG_KEYWORD(BOG_ELSE)
while		BOG_KEYWORD(BOG_WHILE)
const		BOG_KEYWORD(BOG_CONST)
return		BOG_KEYWORD(BOG_RETURN)
DERV		BOG_KEYWORD(BOG_DERV)


"{"			BOG_SPECIAL_CHAR(BOG_O_CURLY)
"}"			BOG_SPECIAL_CHAR(BOG_C_CURLY)
"("			BOG_SPECIAL_CHAR(BOG_O_PARAN)
")"			BOG_SPECIAL_CHAR(BOG_C_PARAN)
"["			BOG_SPECIAL_CHAR(BOG_O_BRACKET)
"]"			BOG_SPECIAL_CHAR(BOG_C_BRACKET)
";"			BOG_SPECIAL_CHAR(BOG_SEMICOLON)
":"			BOG_SPECIAL_CHAR(BIG_COLON)
"\""		BOG_SPECIAL_CHAR(BOG_QUOTE)
"#"			BOG_SPECIAL_CHAR(BOG_HASH)
"="			BOG_SPECIAL_CHAR(BOG_ASSIGN)
"."			BOG_SPECIAL_CHAR(BOG_PERIOD)
","			BOG_SPECIAL_CHAR(BOG_COMMA)
"\\"		BOG_SPECIAL_CHAR(BOG_BACKSLASH)


"+"			BOG_OPERATOR(BOG_PLUS)
"-"			BOG_OPERATOR(BOG_MINUS)
"*"			BOG_OPERATOR(BOG_MULT)
"/"			BOG_OPERATOR(BOG_DIV)
"%"			BOG_OPERATOR(BIG_MOD)
"||"		BOG_OPERATOR(BOG_OR)
"&&"		BOG_OPERATOR(BOG_AND)
"=="		BOG_OPERATOR(BOG_EQ)
"!="		BOG_OPERATOR(BOG_NEQ)
"!"			BOG_OPERATOR(BOG_NOT)
"<"			BOG_OPERATOR(BOG_LE)
">"			BOG_OPERATOR(BOG_GE)
"<="		BOG_OPERATOR(BOG_LEQ)
">="		BOG_OPERATOR(BOG_GEQ)
"+="		BOG_OPERATOR(BOG_PLUS_ASSIGN)
"-="		BOG_OPERATOR(BOG_MINUS_ASSIGN)
"*="		BOG_OPERATOR(BOG_MULT_ASSIGN)
"/="		BOG_OPERATOR(BOG_DIV_ASSIGN)
"%="		BOG_OPERATOR(BOG_MOD_ASSIGN)
"++"		BOG_OPERATOR(BOG_INCREMENTOR)
"--"		BOG_OPERATOR(BOG_DECREMENTER)


{INTEGER}	BOG_LITERALS(BOG_INT)
{FLOAT}		BOG_LITERALS(BOG_FLOAT)
{BOOLEAN}	BOG_LITERALS(BOG_BOOLEAN)

{NAME}		BOG_NAME(BOG_NAME)

.			BOG_REPORT






